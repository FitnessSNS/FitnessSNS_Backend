generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Challenge {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(30)
  content            String               @db.Text
  condition          Int
  end_date           DateTime             @db.Date
  total_user         Int                  @default(0)
  created_at         DateTime             @default(now()) @db.DateTime(0)
  updated_at         DateTime             @default(now()) @db.DateTime(0)
  status             String               @default("RUN") @db.VarChar(10)
  ChallengeImage     ChallengeImage[]
  CompletedChallenge CompletedChallenge[]
  FailedChallenge    FailedChallenge[]
  UserChallenge      UserChallenge[]
}

model ChallengeConfirm {
  id                Int           @id @default(autoincrement())
  user_challenge_id Int
  isSuccess         Boolean       @default(false)
  created_at        DateTime      @default(now()) @db.DateTime(0)
  updated_at        DateTime      @default(now()) @db.DateTime(0)
  status            String        @default("RUN") @db.VarChar(10)
  UserChallenge     UserChallenge @relation(fields: [user_challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserChallenge_TO_ChallengeConfirm_1")

  @@index([user_challenge_id], map: "FK_UserChallenge_TO_ChallengeConfirm_1")
}

model ChallengeImage {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  image        String?   @db.Text
  created_at   DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime  @default(now()) @db.DateTime(0)
  status       String    @default("RUN") @db.VarChar(10)
  Challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_ChallengeImage_1")

  @@index([challenge_id], map: "FK_Challenge_TO_ChallengeImage_1")
}

model CompletedChallenge {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  created_at   DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime  @default(now()) @db.DateTime(0)
  status       String    @default("RUN") @db.VarChar(10)
  Challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_CompletedChallenge_1")

  @@index([challenge_id], map: "FK_Challenge_TO_CompletedChallenge_1")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  image      String?  @db.Text
  title      String   @db.VarChar(30)
  content    String?  @db.Text
  code       String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
}

model Distance {
  id         Int      @id @default(autoincrement())
  user_id    Int
  distance   Int      @default(0)
  time       DateTime @default(dbgenerated("'00:00:00'")) @db.Time(0)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
  User       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Distance_1")

  @@index([user_id], map: "FK_User_TO_Distance_1")
}

model ExerciseLocation {
  id         Int      @id @default(autoincrement())
  user_id    Int
  longitude  Decimal  @default(0.0000000000) @db.Decimal(18, 10)
  latitude   Decimal  @default(0.0000000000) @db.Decimal(18, 10)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
  User       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_ExerciseLocation_1")

  @@index([user_id], map: "FK_User_TO_ExerciseLocation_1")
}

model FailedChallenge {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  created_at   DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime  @default(now()) @db.DateTime(0)
  status       String    @default("RUN") @db.VarChar(10)
  Challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_FailedChallenge_1")

  @@index([challenge_id], map: "FK_Challenge_TO_FailedChallenge_1")
}

model Reward {
  id         Int      @id @default(autoincrement())
  user_id    Int
  point      Int      @default(0)
  reason     String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
  User       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Reward_1")

  @@index([user_id], map: "FK_User_TO_Reward_1")
}

model Session {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  refresh_token String   @db.Text
  ip            String   @db.Text
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id                    Int                @id @default(autoincrement())
  provider              String
  provider_id           String?
  email                 String             @db.VarChar(50)
  password              String?            @db.Text
  salt                  String?            @db.Text
  account_details_saved Boolean            @default(false)
  created_at            DateTime           @default(now()) @db.DateTime(0)
  updated_at            DateTime           @default(now()) @db.DateTime(0)
  status                String             @default("RUN") @db.VarChar(10)
  Distance              Distance[]
  ExerciseLocation      ExerciseLocation[]
  Reward                Reward[]
  Session               Session?
  UserChallenge         UserChallenge[]
  UserProfile           UserProfile?

  @@unique([provider, provider_id])
  @@unique([provider, email])
}

model UserChallenge {
  id               Int                @id @default(autoincrement())
  challenge_id     Int
  user_id          Int
  count            Int?
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  status           String             @default("RUN") @db.VarChar(10)
  Challenge        Challenge          @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_UserChallenge_1")
  User             User               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_UserChallenge_1")
  ChallengeConfirm ChallengeConfirm[]

  @@index([challenge_id], map: "FK_Challenge_TO_UserChallenge_1")
  @@index([user_id], map: "FK_User_TO_UserChallenge_1")
}

model UserProfile {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  nickname   String   @db.VarChar(20)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Ev {
  id                Int      @id @default(autoincrement())
  email             String   @unique @db.VarChar(50)
  code              Int
  updated_at        DateTime @default(now()) @db.DateTime(0)
  total_gen_per_day Int      @default(1)
  isVerified        Boolean  @default(false)
  created_at        DateTime @default(now()) @db.DateTime(0)
}

model Ment {
  id         Int       @id @default(autoincrement())
  content    String?   @db.VarChar(100)
  date       DateTime? @db.Date
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  status     String    @default("RUN") @db.VarChar(10)
}
