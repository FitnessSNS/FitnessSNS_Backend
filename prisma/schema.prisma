generator client {
  provider  = "prisma-client-js"
  generator = "./gerated/testClient"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Challenge {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(30)
  content            String               @db.Text
  condition          Int
  end_date           DateTime             @db.Date
  total_user         Int                  @default(0)
  created_at         DateTime             @default(now()) @db.DateTime(0)
  updated_at         DateTime             @default(now()) @db.DateTime(0)
  status             String               @default("RUN") @db.VarChar(10)
  ChallengeImage     ChallengeImage[]
  CompletedChallenge CompletedChallenge[]
  FailedChallenge    FailedChallenge[]
  UserChallenge      UserChallenge[]
}

model ChallengeConfirm {
  id                Int           @id @default(autoincrement())
  user_challenge_id Int
  isSuccess         Boolean       @default(false)
  created_at        DateTime      @default(now()) @db.DateTime(0)
  updated_at        DateTime      @default(now()) @db.DateTime(0)
  status            String        @default("RUN") @db.VarChar(10)
  UserChallenge     UserChallenge @relation(fields: [user_challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserChallenge_TO_ChallengeConfirm_1")

  @@index([user_challenge_id], map: "FK_UserChallenge_TO_ChallengeConfirm_1")
}

model ChallengeImage {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  image        String?   @db.Text
  created_at   DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime  @default(now()) @db.DateTime(0)
  status       String    @default("RUN") @db.VarChar(10)
  Challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_ChallengeImage_1")

  @@index([challenge_id], map: "FK_Challenge_TO_ChallengeImage_1")
}

model CompletedChallenge {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  created_at   DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime  @default(now()) @db.DateTime(0)
  status       String    @default("RUN") @db.VarChar(10)
  Challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_CompletedChallenge_1")

  @@index([challenge_id], map: "FK_Challenge_TO_CompletedChallenge_1")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  image      String?  @db.Text
  title      String   @db.VarChar(30)
  content    String?  @db.Text
  code       String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
}

model Distance {
  id         Int      @id @default(autoincrement())
  user_id    Int
  distance   Int      @default(0)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
  User       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Distance_1")

  @@index([user_id], map: "FK_User_TO_Distance_1")
}

model ExerciseLocation {
  id         Int      @id @default(autoincrement())
  user_id    Int
  longitude  Decimal  @default(0.0000000000) @db.Decimal(18, 10)
  latitude   Decimal  @default(0.0000000000) @db.Decimal(18, 10)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
  User       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_ExerciseLocation_1")

  @@index([user_id], map: "FK_User_TO_ExerciseLocation_1")
}

model FailedChallenge {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  created_at   DateTime  @default(now()) @db.DateTime(0)
  updated_at   DateTime  @default(now()) @db.DateTime(0)
  status       String    @default("RUN") @db.VarChar(10)
  Challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_FailedChallenge_1")

  @@index([challenge_id], map: "FK_Challenge_TO_FailedChallenge_1")
}

model Reward {
  id         Int      @id @default(autoincrement())
  user_id    Int
  point      Int      @default(0)
  reason     String?  @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  status     String   @default("RUN") @db.VarChar(10)
  User       User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Reward_1")

  @@index([user_id], map: "FK_User_TO_Reward_1")
}

model Session {
  id                            Int      @id @default(autoincrement())
  user_id                       Int
  request_token                 String   @db.VarChar(100)
  ip                            String   @db.VarChar(15)
  created_at                    DateTime @default(now()) @db.DateTime(0)
  updated_at                    DateTime @default(now()) @db.DateTime(0)
  status                        String   @default("RUN") @db.VarChar(10)
  User_Session_user_idToUser    User     @relation("Session_user_idToUser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_Session_1")
  User_SessionToUser_session_id User[]   @relation("SessionToUser_session_id")

  @@index([user_id], map: "FK_User_TO_Session_1")
}

model User {
  id                                       Int                @id @default(autoincrement())
  profile_id                               Int?
  session_id                               Int?
  provider                                 Int?
  email                                    String             @db.VarChar(50)
  password                                 String?            @db.Text
  account_details_saved                    Boolean            @default(false)
  created_at                               DateTime           @default(now()) @db.DateTime(0)
  updated_at                               DateTime           @default(now()) @db.DateTime(0)
  status                                   String             @default("RUN") @db.VarChar(10)
  Session_SessionToUser_session_id         Session?           @relation("SessionToUser_session_id", fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Session_TO_User_1")
  UserProfile_User_profile_idToUserProfile UserProfile?       @relation("User_profile_idToUserProfile", fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserProfile_TO_User_1")
  Distance                                 Distance[]
  ExerciseLocation                         ExerciseLocation[]
  Reward                                   Reward[]
  Session_Session_user_idToUser            Session[]          @relation("Session_user_idToUser")
  UserChallenge                            UserChallenge[]
  UserProfile_UserToUserProfile_user_id    UserProfile[]      @relation("UserToUserProfile_user_id")

  @@index([session_id], map: "FK_Session_TO_User_1")
  @@index([profile_id], map: "FK_UserProfile_TO_User_1")
}

model UserChallenge {
  id               Int                @id @default(autoincrement())
  challenge_id     Int
  user_id          Int
  count            Int?
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  status           String             @default("RUN") @db.VarChar(10)
  Challenge        Challenge          @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Challenge_TO_UserChallenge_1")
  User             User               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_UserChallenge_1")
  ChallengeConfirm ChallengeConfirm[]

  @@index([challenge_id], map: "FK_Challenge_TO_UserChallenge_1")
  @@index([user_id], map: "FK_User_TO_UserChallenge_1")
}

model UserProfile {
  id                                Int      @id @default(autoincrement())
  user_id                           Int
  nickname                          String   @db.VarChar(20)
  created_at                        DateTime @default(now()) @db.DateTime(0)
  updated_at                        DateTime @default(now()) @db.DateTime(0)
  Field3                            String   @default("RUN") @db.VarChar(255)
  User_UserToUserProfile_user_id    User     @relation("UserToUserProfile_user_id", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_TO_UserProfile_1")
  User_User_profile_idToUserProfile User[]   @relation("User_profile_idToUserProfile")

  @@index([user_id], map: "FK_User_TO_UserProfile_1")
}
